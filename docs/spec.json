{"info": {"description": "\n### A service to embed and detect Intellectual Property Rights (IPRs) to (geospatial) datasets.\n\nThe *IPR service* offers various methods to embed IPR to tabular, vector and raster assets.\n", "contact": {"email": "pmitropoulos@getmap.gr"}, "title": "IPR API", "version": "0.0.1"}, "externalDocs": {"description": "GitHub", "url": "https://github.com/OpertusMundi/ipr-service"}, "paths": {"/static/{filename}": {}, "/vector/embed/fictitious": {"post": {"summary": "Embed fictitious entries.", "description": "Embed fictitious entries in the dataset, according to the given unique key.", "tags": ["Vector", "Tabular"], "parameters": [{"$ref": "#/components/parameters/idempotencyKey"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/vectorEmbedForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/promptEmbedResponse"}, "202": {"$ref": "#/components/responses/deferredResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}}}}, "/vector/embed/geometries": {"post": {"summary": "Embed collinear points in selected geometries.", "description": "Embed collinear points in selected geometries of the dataset, according to the given unique key.", "tags": ["Vector"], "parameters": [{"$ref": "#/components/parameters/idempotencyKey"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/vectorEmbedForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/promptEmbedResponse"}, "202": {"$ref": "#/components/responses/deferredResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}}}}, "/vector/detect/fictitious": {"post": {"summary": "Detect fictitious entries.", "description": "Detect fictitious entries in the dataset, applying the given keys.", "tags": ["Vector", "Tabular"], "parameters": [{"$ref": "#/components/parameters/idempotencyKey"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/vectorDetectForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/promptDetectResponse"}, "202": {"$ref": "#/components/responses/deferredResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}}}}, "/vector/detect/geometries": {"post": {"summary": "Detect embedded collinear points in selected geometries.", "description": "Detect embedded collinear points in selected geometries of the dataset, applying the given keys.", "tags": ["Vector"], "parameters": [{"$ref": "#/components/parameters/idempotencyKey"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/vectorDetectForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/promptDetectResponse"}, "202": {"$ref": "#/components/responses/deferredResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}}}}, "/raster/embed/watermark": {"post": {"summary": "Embed a visible watermark.", "description": "Embed a visible watermark, placed according to the given parameters.", "tags": ["Raster"], "parameters": [{"$ref": "#/components/parameters/idempotencyKey"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/rasterEmbedWatermarkForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/promptEmbedResponse"}, "202": {"$ref": "#/components/responses/deferredResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}}}}, "/raster/embed/message": {"post": {"summary": "Embed an invisible message.", "description": "Embed an invisible message to raster.", "tags": ["Raster"], "parameters": [{"$ref": "#/components/parameters/idempotencyKey"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/rasterEmbedMessageForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/promptEmbedResponse"}, "202": {"$ref": "#/components/responses/deferredResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}}}}, "/raster/detect/message": {"post": {"summary": "Detect an invisible message.", "description": "Detect an invisible message, previously embedded to the raster.", "tags": ["Raster"], "parameters": [{"$ref": "#/components/parameters/idempotencyKey"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/rasterDetectForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/promptDetectResponse"}, "202": {"$ref": "#/components/responses/deferredResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}}}}, "/download/{ticket}/{filename}": {"get": {"summary": "Download a resource.", "tags": ["Misc"], "parameters": [{"name": "ticket", "in": "path", "schema": {"type": "string"}, "description": "The ticket of the request resulted in the resource.", "required": true}, {"name": "filename", "in": "path", "schema": {"type": "string"}, "description": "The requested file name.", "required": true}], "responses": {"200": {"description": "The requested file.", "content": {"application/x-tar": {"schema": {"type": "string", "format": "binary"}}}}, "404": {"description": "Ticket not found.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Error message", "example": "Ticket not found."}}}}}}, "410": {"description": "Resource not available.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Error message", "example": "Resource not available."}}}}}}}}}, "/health": {"get": {"summary": "Get health status.", "tags": ["Misc"], "responses": {"200": {"description": "An object with status information.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "enum": ["OK", "FAILED"], "description": "A status of 'OK' or 'FAILED'."}, "details": {"type": "object", "description": "The reason of failure for each component, or 'OK' if not failed.", "properties": {"gdal": {"type": "string", "example": "OK"}, "filesystem": {"type": "string", "example": "OK"}, "db": {"type": "string", "example": "OK"}}}}}}}}}}}, "/jobs/": {"get": {"summary": "Get the running processes.", "description": "Get the running processes among all sessions.", "tags": ["Jobs"], "responses": {"200": {"description": "The list of the running processes.", "content": {"application/json": {"schema": {"type": "array", "items": {"description": "Details of the process.", "type": "object", "properties": {"ticket": {"type": "string", "description": "The ticket assigne to the process.", "example": "caff960ab6f1627c11b0de3c6406a140"}, "idempotencyKey": {"type": "string", "description": "The X-Idempotency-Key sent in the headers of the request (null if the request was not associated with an idempotency key).", "example": "e5d16e99-dee1-4d16-acce-ca0f20a83a0a"}, "requestType": {"type": "string", "description": "Type of the request."}, "initiated": {"type": "string", "format": "date-time", "description": "The timestamp of the request."}}}}}}}}}}, "/jobs/status": {"get": {"summary": "Returns the status of a process.", "description": "Returns the status of the process identified by a ticket or idempotency key.", "tags": ["Jobs"], "parameters": [{"name": "ticket", "in": "query", "schema": {"type": "string"}, "required": false, "description": "The request ticket (required if *idempotency-key* is not given)."}, {"name": "idempotency-key", "in": "query", "schema": {"type": "string"}, "required": false, "description": "The idempotency-key sent with the request (required if *ticket* is not given)."}], "responses": {"200": {"description": "The process was found and the response contains its status details.", "content": {"application/json": {"schema": {"type": "object", "properties": {"ticket": {"type": "string", "description": "Request ticket.", "example": "caff960ab6f1627c11b0de3c6406a140"}, "idempotencyKey": {"type": "string", "description": "The X-Idempotency-Key sent in the headers of the request (null if the request was not associated with an idempotency key).", "example": "e5d16e99-dee1-4d16-acce-ca0f20a83a0a"}, "requestType": {"type": "string", "enum": ["ingest", "export"], "description": "Type of the request."}, "initiated": {"type": "string", "format": "date-time", "description": "The timestamp of the request."}, "executionTime": {"type": "number", "format": "float", "description": "The execution time in seconds.", "example": 8.29}, "completed": {"type": "boolean", "description": "Whether the process has been completed."}, "success": {"type": "boolean", "description": "Whether the process has been completed succesfully."}, "errorMessage": {"type": "string", "description": "The error message in case of failure."}, "resource": {"type": "object", "description": "The resources associated with the process result.", "properties": {"link": {"type": "string", "description": "The link to download a resource resulted from an export request; null for any other type of request.", "example": "/download/my_dataset.tar.gz"}, "outputPath": {"type": "string", "description": "The relative path of the resource resulted from an export request in the output directory; null for any other type of request or if copy to the output directory was not requested.", "example": "2102/{token}/caff960ab6f1627c11b0de3c6406a140/my_dataset.tar.gz"}}}}}}}}, "400": {"description": "Both query parameters are missing.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Error message", "example": "One of 'ticket', 'idempotency-key' is required in query parameters."}}}}}}, "404": {"description": "The ticket or idempotency-key not found.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Error message", "example": "Process not found."}}}}}}}}}}, "openapi": "3.0.2", "components": {"schemas": {"vectorEmbedForm": {"type": "object", "properties": {"response": {"type": "string", "description": "Response type, either *prompt* to initiate the process promptly and wait for the response, either *deferred* to finish the process asynchronously.", "enum": ["prompt", "deferred"], "default": "deferred"}, "original": {"type": "string", "description": "A resolvable path to the original file, relative to the **input directory**. The file could be in compressed form: zipped or tar(.gz) archive.", "example": "/datasets/example.tar.gz"}, "delimiter": {"type": "string", "description": "In case the file is a delimited text file, the character used to separate values. Ignored for not delimited files.", "example": ";", "default": ","}, "lat": {"type": "string", "description": "The attribute name in delimited text files that corresponds to latitude, if the geometry is given in means of lat, lon. Ignored for not delimited files.", "example": "latitude"}, "lon": {"type": "string", "description": "The attribute name in delimited text files that corresponds to longitude, if the geometry is given in means of lat, lon. Ignored for not delimited files.", "example": "longitude"}, "geom": {"type": "string", "description": "The attribute name in delimited text files that corresponds to WKT geometry. Default is 'WKT'; ignored for not delimited files **or** when 'lat', 'lon' are provided.", "example": "geometry"}, "crs": {"type": "string", "description": "The Coordinate Reference System of the geometries. If not given, the CRS information is obtained by the dataset; **required for** spatial files that do not provide CRS information, e.g. CSV.", "example": "EPSG:4326"}, "encoding": {"type": "string", "description": "The encoding of the file. If not given, the encoding is automatically detected.", "example": "UTF-8"}, "key": {"type": "string", "description": "A unique key to embed in dataset.", "example": "09061d7e-3b1a-4a14-bfa5-b65b9ce0412d"}}, "required": ["original", "key"]}, "vectorDetectForm": {"type": "object", "properties": {"response": {"type": "string", "description": "Response type, either *prompt* to initiate the process promptly and wait for the response, either *deferred* to finish the process asynchronously.", "enum": ["prompt", "deferred"], "default": "deferred"}, "original": {"type": "string", "description": "A resolvable path to the original file, relative to the **input directory**. The file could be in compressed form: zipped or tar(.gz) archive.", "example": "/datasets/example.tar.gz"}, "delimiter": {"type": "string", "description": "In case the file is a delimited text file, the character used to separate values. Ignored for not delimited files.", "example": ";", "default": ","}, "lat": {"type": "string", "description": "The attribute name in delimited text files that corresponds to latitude, if the geometry is given in means of lat, lon. Ignored for not delimited files.", "example": "latitude"}, "lon": {"type": "string", "description": "The attribute name in delimited text files that corresponds to longitude, if the geometry is given in means of lat, lon. Ignored for not delimited files.", "example": "longitude"}, "geom": {"type": "string", "description": "The attribute name in delimited text files that corresponds to WKT geometry. Default is 'WKT'; ignored for not delimited files **or** when 'lat', 'lon' are provided.", "example": "geometry"}, "crs": {"type": "string", "description": "The Coordinate Reference System of the geometries. If not given, the CRS information is obtained by the dataset; **required for** spatial files that do not provide CRS information, e.g. CSV.", "example": "EPSG:4326"}, "encoding": {"type": "string", "description": "The encoding of the file. If not given, the encoding is automatically detected.", "example": "UTF-8"}, "test": {"type": "string", "description": "A resolvable path to under detection file, relative to the **input directory**. The file could be in compressed form: zipped or tar(.gz) archive.", "example": "detect/example.tar.gz"}, "test_delimiter": {"type": "string", "description": "**Refers to test file**. In case the file is a delimited text file, the character used to separate values. Ignored for not delimited files. **If not given, the value for the original file will be assumed.**", "example": ";"}, "test_lat": {"type": "string", "description": "**Refers to test file**. The attribute name in delimited text files that corresponds to latitude, if the geometry is given in means of lat, lon. Ignored for not delimited files. **If not given, the value for the original file will be assumed.**", "example": "latitude"}, "test_lon": {"type": "string", "description": "**Refers to test file**. The attribute name in delimited text files that corresponds to longitude, if the geometry is given in means of lat, lon. Ignored for not delimited files. **If not given, the value for the original file will be assumed.**", "example": "longitude"}, "test_geom": {"type": "string", "description": "**Refers to test file**. The attribute name in delimited text files that corresponds to WKT geometry. Default is 'WKT'; ignored for not delimited files **or** when 'lat', 'lon' are provided. **If not given, the value for the original file will be assumed.**", "example": "geometry"}, "test_crs": {"type": "string", "description": "**Refers to test file**. The Coordinate Reference System of the geometries. If not given, the CRS information is obtained by the dataset; **required for** spatial files that do not provide CRS information, e.g. CSV. **If not given, the value for the original file will be assumed.**", "example": "EPSG:4326"}, "test_encoding": {"type": "string", "description": "**Refers to test file**. The encoding of the file. If not given, the encoding is automatically detected. **If not given, the value for the original file will be assumed.**", "example": "UTF-8"}, "keys": {"type": "array", "description": "List of keys to detect IPR.", "items": {"type": "string", "description": "Embedded key"}, "example": ["09061d7e-3b1a-4a14-bfa5-b65b9ce0412f", "09061d7e-3b1a-4a14-bfa5-b65b9ce0412d", "09061d7e-3b1a-4a14-bfa5-b65b9ce0412e"]}}, "required": ["original", "test", "keys"]}, "rasterEmbedMessageForm": {"type": "object", "properties": {"response": {"type": "string", "description": "Response type, either *prompt* to initiate the process promptly and wait for the response, either *deferred* to finish the process asynchronously.", "enum": ["prompt", "deferred"], "default": "deferred"}, "raster": {"type": "string", "description": "A resolvable path to the raster file, relative to the **input directory**. The file could be in compressed form: zipped or tar(.gz) archive.", "example": "rasters/example.tif"}, "message": {"type": "string", "description": "Message to invisible embed in raster.", "example": "09061d7e-3b1a-4a14-bfa5-b65b9ce0412d"}}, "required": ["raster", "message"]}, "rasterDetectForm": {"type": "object", "properties": {"response": {"type": "string", "description": "Response type, either *prompt* to initiate the process promptly and wait for the response, either *deferred* to finish the process asynchronously.", "enum": ["prompt", "deferred"], "default": "deferred"}, "raster": {"type": "string", "description": "A resolvable path to the raster file, relative to the **input directory**. The file could be in compressed form: zipped or tar(.gz) archive.", "example": "rasters/example.tif"}, "watermarked": {"type": "string", "description": "A resolvable path to the *watermarked* raster file, relative to the **input directory**. The file could be in compressed form: zipped or tar(.gz) archive.", "example": "rasters/example-watermarked.tif"}}, "required": ["raster", "watermarked"]}, "rasterEmbedWatermarkForm": {"type": "object", "properties": {"response": {"type": "string", "description": "Response type, either *prompt* to initiate the process promptly and wait for the response, either *deferred* to finish the process asynchronously.", "enum": ["prompt", "deferred"], "default": "deferred"}, "raster": {"type": "string", "description": "A resolvable path to the raster file, relative to the **input directory**. The file could be in compressed form: zipped or tar(.gz) archive.", "example": "rasters/example.tif"}, "watermark": {"type": "string", "description": "A resolvable path to the *watermark* that will be embedded to raster, relative to the **input directory**. The file could be in compressed form: zipped or tar(.gz) archive.", "example": "logo.png"}, "crs": {"type": "string", "description": "The Coordinate Reference System of the geometries. If not given, the CRS information is obtained by the dataset; **required for** spatial files that do not provide CRS information, e.g. CSV.", "example": "EPSG:4326"}, "transparency": {"type": "number", "format": "float", "default": 1.0, "description": "The transparency of the embedded watermark.", "minimum": 0.0, "maximum": 1.0}, "fit": {"type": "string", "description": "Fit type of watermark embedding.", "enum": ["stretch", "height", "width", "original", "tile"], "default": "width"}, "position": {"type": "string", "description": "Position of watermark embedding.", "enum": ["topleft", "topright", "bottomright", "bottomleft", "center"], "default": "center"}, "distance_x": {"type": "integer", "description": "**For *tile* fit.** Horizontal distance in pixels of the watermarks. Ignored when fit is not *tile*; **required** when fit is *tile.", "example": 100}, "distance_y": {"type": "integer", "description": "**For *tile* fit.** Vertical distance in pixels of the watermarks. Ignored when fit is not *tile*; **required** when fit is *tile.", "example": 200}}, "required": ["raster", "watermark"]}}, "responses": {"validationErrorResponse": {"description": "Form validation error.", "content": {"application/json": {"schema": {"type": "object", "description": "The key is the request body key.", "additionalProperties": {"type": "array", "items": {"type": "string", "description": "Description of validation error."}}, "example": {"crs": ["Field must be a valid CRS."]}}}}}, "deferredResponse": {"description": "Request accepted for process.", "content": {"application/json": {"schema": {"type": "object", "properties": {"type": {"type": "string", "description": "Request type.", "enum": ["prompt", "deferred"], "example": "deferred"}, "ticket": {"type": "string", "description": "The unique ticket assigned to the request.", "example": "caff960ab6f1627c11b0de3c6406a140"}, "statusUri": {"type": "string", "description": "The URI to poll for the status of the request.", "example": "/jobs/status?ticket=caff960ab6f1627c11b0de3c6406a140"}}}}}}, "promptEmbedResponse": {"content": {"application/json": {"schema": {"type": "object", "description": "When form parameter *download* was set to false.", "properties": {"type": {"type": "string", "description": "Request type.", "enum": ["prompt", "deferred"]}, "path": {"type": "string", "description": "The relative to the *output directory* path for the spatial file.", "example": "2103/3ba6a8b5ecea27db3c5f4e0159c63283/example.csv.gz"}}}}}}, "promptDetectResponse": {"content": {"application/json": {"schema": {"type": "object", "description": "When form parameter *download* was set to false.", "properties": {"type": {"type": "string", "description": "Request type.", "enum": ["prompt", "deferred"]}, "key": {"type": "string", "description": "The detected key; null if none detected.", "example": "09061d7e-3b1a-4a14-bfa5-b65b9ce0412d"}}}}}}}, "parameters": {"idempotencyKey": {"name": "X-Idempotence-Key", "description": "A unique idempotency key assigned to each request.", "required": false, "schema": {"type": "string"}, "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9", "in": "header"}}}}